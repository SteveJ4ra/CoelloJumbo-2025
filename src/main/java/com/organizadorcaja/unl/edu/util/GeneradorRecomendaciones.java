package com.organizadorcaja.unl.edu.util;

import com.organizadorcaja.unl.edu.model.Cajon;
import com.organizadorcaja.unl.edu.model.Objeto;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class GeneradorRecomendaciones {

    public List<String> generarRecomendaciones(Cajon cajon) {
        List<String> recomendaciones = new ArrayList<>();

        // Regla 1: Caj√≥n casi lleno
        if (cajon.porcentajeOcupado() > 80) {
            recomendaciones.add("‚ö† Este caj√≥n est√° casi lleno. Considera no agregar m√°s objetos.");
        }

        // Regla 2: Caj√≥n vac√≠o
        if (cajon.getObjetos().isEmpty()) {
            recomendaciones.add("‚Ñπ Este caj√≥n est√° vac√≠o. Podr√≠as usarlo para organizar objetos peque√±os.");
        }

        // Regla 3: Detectar duplicados
        Set<String> nombres = new HashSet<>();
        Set<String> duplicados = new HashSet<>();
        for (Objeto obj : cajon.getObjetos()) {
            if (!nombres.add(obj.getNombre())) {
                duplicados.add(obj.getNombre());
            }
        }
        if (!duplicados.isEmpty()) {
            recomendaciones.add("üîÑ Se encontraron objetos duplicados: " + String.join(", ", duplicados) + ".");
        }

        // Regla 4: Caj√≥n subutilizado
        if (cajon.porcentajeOcupado() < 30 && !cajon.getObjetos().isEmpty()) {
            recomendaciones.add("üì¶ Este caj√≥n est√° casi vac√≠o. Podr√≠as optimizar el espacio.");
        }

        // Regla 5: Sugerencia por tipos de objetos
        long ropaCount = cajon.getObjetos().stream()
                .filter(o -> "Ropa".equalsIgnoreCase(o.getTipo()))
                .count();
        if (ropaCount > 0 && ropaCount == cajon.getObjetos().size()) {
            recomendaciones.add("üëï Este caj√≥n contiene solo ropa. ¬°Buena organizaci√≥n!");
        }

        return recomendaciones;
    }
}
